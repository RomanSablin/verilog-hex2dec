// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 100 ps

//(* CORE_GENERATION_INFO="div10,hls_ip_2018_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xa7a12tcsg325-1q,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.071250,HLS_SYN_LAT=2,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=112,HLS_SYN_LUT=296,HLS_VERSION=2018_2}" *)

module div10 (
    input ap_clk,
    input ap_rst,
    input ap_start,
    output reg ap_done,
    output reg ap_idle,
    output reg ap_ready,
    input [31:0] n,
    output [31:0] ap_return
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

//(* fsm_encoding = "none" *)
reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] q_2_fu_122_p2;
reg   [31:0] q_2_reg_214;
reg   [15:0] tmp_4_reg_219;
wire   [28:0] tmp_12_fu_146_p4;
reg   [28:0] tmp_12_reg_224;
wire    ap_CS_fsm_state2;
wire   [31:0] r_fu_181_p2;
reg   [31:0] r_reg_229;
wire   [30:0] tmp_fu_54_p4;
wire   [29:0] tmp_1_fu_68_p4;
wire   [31:0] tmp_5_fu_64_p1;
wire   [31:0] tmp_8_fu_78_p1;
wire   [31:0] q_fu_82_p2;
wire   [27:0] tmp_2_fu_88_p4;
wire   [31:0] tmp_s_fu_98_p1;
wire   [31:0] q_1_fu_102_p2;
wire   [23:0] tmp_3_fu_108_p4;
wire   [31:0] tmp_10_fu_118_p1;
wire   [31:0] tmp_11_fu_138_p1;
wire   [31:0] q_3_fu_141_p2;
wire   [29:0] tmp_6_fu_156_p3;
wire   [31:0] q_assign_3_mask_fu_168_p3;
wire   [31:0] p_neg1_fu_176_p2;
wire   [31:0] tmp_6_cast_fu_164_p1;
wire    ap_CS_fsm_state3;
wire   [0:0] tmp_7_fu_190_p2;
wire   [29:0] q_4_cast_fu_187_p1;
wire   [29:0] tmp_8_cast_fu_195_p1;
wire   [29:0] tmp_9_fu_199_p2;
reg   [2:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        q_2_reg_214 <= q_2_fu_122_p2;
        tmp_4_reg_219 <= {{q_2_fu_122_p2[31:16]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        r_reg_229 <= r_fu_181_p2;
        tmp_12_reg_224 <= {{q_3_fu_141_p2[31:3]}};
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_return = tmp_9_fu_199_p2;

assign p_neg1_fu_176_p2 = (n - q_assign_3_mask_fu_168_p3);

assign q_1_fu_102_p2 = (tmp_s_fu_98_p1 + q_fu_82_p2);

assign q_2_fu_122_p2 = (tmp_10_fu_118_p1 + q_1_fu_102_p2);

assign q_3_fu_141_p2 = (tmp_11_fu_138_p1 + q_2_reg_214);

assign q_4_cast_fu_187_p1 = tmp_12_reg_224;

assign q_assign_3_mask_fu_168_p3 = {{tmp_12_fu_146_p4}, {3'd0}};

assign q_fu_82_p2 = (tmp_5_fu_64_p1 + tmp_8_fu_78_p1);

assign r_fu_181_p2 = (p_neg1_fu_176_p2 - tmp_6_cast_fu_164_p1);

assign tmp_10_fu_118_p1 = tmp_3_fu_108_p4;

assign tmp_11_fu_138_p1 = tmp_4_reg_219;

assign tmp_12_fu_146_p4 = {{q_3_fu_141_p2[31:3]}};

assign tmp_1_fu_68_p4 = {{n[31:2]}};

assign tmp_2_fu_88_p4 = {{q_fu_82_p2[31:4]}};

assign tmp_3_fu_108_p4 = {{q_1_fu_102_p2[31:8]}};

assign tmp_5_fu_64_p1 = tmp_fu_54_p4;

assign tmp_6_cast_fu_164_p1 = tmp_6_fu_156_p3;

assign tmp_6_fu_156_p3 = {{tmp_12_fu_146_p4}, {1'd0}};

assign tmp_7_fu_190_p2 = ((r_reg_229 > 32'd9) ? 1'b1 : 1'b0);

assign tmp_8_cast_fu_195_p1 = tmp_7_fu_190_p2;

assign tmp_8_fu_78_p1 = tmp_1_fu_68_p4;

assign tmp_9_fu_199_p2 = (q_4_cast_fu_187_p1 + tmp_8_cast_fu_195_p1);

assign tmp_fu_54_p4 = {{n[31:1]}};

assign tmp_s_fu_98_p1 = tmp_2_fu_88_p4;

endmodule //div10
